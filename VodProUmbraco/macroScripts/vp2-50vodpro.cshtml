@using umbraco.MacroEngines;
@{
  var content50VPID = @Parameter.content50VP;
  
  //var hideResults;  
  if(content50VPID != null)
  {

    DynamicNode vp50node = new DynamicNode(content50VPID);
    
    List<DynamicNode> vp50list = vp50node.Descendants("VP50").Items.OrderBy(n => Int32.Parse(n.GetProperty("rank").ToString())).ToList<DynamicNode>();
    
    <div id="vp50-grid" class="clearfix">              
        <ul>
    @foreach(DynamicNode entry in vp50list)
    {
        string rank = "";
		string name = "";
		string jobTitle = "";
		string briefDesc = "";
		string longDesc = "";
        string portrait = "";
		string previousRank = "New Entry";
		
		try
		{
			if (!String.IsNullOrEmpty(entry.GetProperty("lastYearsRank").ToString()))
			{
				previousRank = entry.GetProperty("lastYearsRank").ToString();
			}
			rank = entry.GetProperty("rank").ToString();
			name = entry.GetProperty("name").ToString();
			jobTitle = entry.GetProperty("jobTitle").ToString();
			briefDesc = entry.GetProperty("briefDescription").ToString();
			longDesc = entry.GetProperty("longDescription").ToString();
			portrait = entry.GetProperty("portrait").ToString();			
		}
		catch(Exception ex)
		{
			// Do nothing
		}
        
        <li id="cell_@(rank)" class="cell" data-id="@(rank)">
			<span id="topof_cell_@(rank)" class="cell-top"></span>
            <div class="cell-inner">
                <div class="cell-image-wrapper">
                    <img class="desaturate vp-nolightbox" src="@(portrait)" />
                </div>
                <div class="cell-number">@(rank)</div>
                <div class="cell-info">
                    <h3>@(entry.GetProperty("name"))</h3>
                    <p>@(entry.GetProperty("jobTitle"))</p>
                </div>
				<span id="jumpto_cell_@(entry.GetProperty("rank"))" class="cell-jump"></span>
            </div>
            <div class="cell-info-panel">
                <div class="info-panel-inner">
                    <div id="main-image-container">
                        <img alt="@(name) - @(jobTitle)" src="@(portrait)" class="main-image vp-nolightbox" />
                    </div>
                    <span class="ranking">@(rank)</span>
                    <h2>@(name)</h2>
                    <h3>@(jobTitle)</h3>
                    <h4>Previous rank: <strong>@(previousRank)</strong></h4>
                    <h4 class="red">@(briefDesc)</h4>
                    <p>@(longDesc)</p>
                    <div class="social-container">
                        @if(!String.IsNullOrEmpty(entry.GetProperty("twitterHandle").ToString()))
                        {
                            string tw = entry.GetProperty("twitterHandle").ToString().Replace("@","");
                            
                        <a href="https://twitter.com/@(tw)" class="social--twitter" target="vpsocial" title="Connect with @@@(tw) on Twitter">
                          <span class="fa-stack fa-lg">
                            <i class="fa fa-circle fa-stack-2x"></i>
                            <i class="fa fa-twitter fa-stack-1x fa-inverse"></i></span></a>
                        }
                        @if (!String.IsNullOrEmpty(entry.GetProperty("linkedInURL").ToString()))
                        {
                            string linkedInURL = entry.GetProperty("linkedInURL").ToString();
                            if (!(linkedInURL.StartsWith("http://") || linkedInURL.StartsWith("https://")))
                            {
                                linkedInURL = "http://" + linkedInURL;
                            }
                        <a href="@(linkedInURL)" class="social--linkedin" target="vpsocial" title="Connect with @(entry.GetProperty("name")) on LinkedIn">
                          <span class="fa-stack fa-lg">
                            <i class="fa fa-square fa-stack-2x"></i>
                            <i class="fa fa-linkedin fa-stack-1x fa-inverse"></i></span></a>
                        }
                        @if(!String.IsNullOrEmpty(entry.GetProperty("moreInfoLink").ToString()))
                        {
                            string moreInfoLink = entry.GetProperty("moreInfoLink").ToString().Replace("@", "");
                            if (!(moreInfoLink.StartsWith("http://") || moreInfoLink.StartsWith("https://")))
                            {
                                moreInfoLink = "http://"+moreInfoLink;
                            }
                            
                        <a href="@(moreInfoLink)" class="social--outbound" target="vpsocial" title="@(entry.GetProperty("name")) on the web">
                          <span class="fa-stack fa-lg">
                            <i class="fa fa-square fa-stack-2x"></i>
                            <i class="fa fa-external-link fa-stack-1x fa-inverse"></i></span></a> 
                        }
                    </div>
                </div>
            </div>
        </li>        
       
    }
        </ul>
    </div>                                
    <span id="vp50-foot"></span>                                                               
    <div id="vp50-ads" class="on-screen inline">
    @if (@Model.AncestorOrSelf().sponsors.GetType() == typeof(umbraco.MacroEngines.DynamicXml))
    {
        var sponsorIDs = @Model.AncestorOrSelf().sponsors.GetEnumerator();
        <ul>
        @foreach (var sponsorID in @sponsorIDs)
        {
            dynamic sponsor = @Model.NodeById(@sponsorID.InnerText);
            string sponsorurl = "#";
            if (sponsor.sponsorStory.GetType() == typeof(System.Int32))
            {
                sponsorurl = umbraco.library.NiceUrl(sponsor.sponsorStory);
            }
            else if (sponsor.sponsorUrl.GetType() == typeof(System.String))
            {
                sponsorurl = @sponsor.sponsorUrl;
            }
            <li><a href="@sponsorurl"><img src="@sponsor.sponsorImage" /></a></li>
        }
        </ul>
    }   
    </div>
  }
}