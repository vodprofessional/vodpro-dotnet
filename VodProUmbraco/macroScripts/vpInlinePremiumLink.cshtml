@using System.Security.Cryptography;
@using System.Text;
@{
  string filename = @Parameter.filename;
  string linktitle = @Parameter.linktitle;
  string linkclass = @Parameter.linkclass;
  
  
  byte[] _salt = Encoding.ASCII.GetBytes("o6806642kbM7c5");
  string pwd = "vodpro";

  
  string outStr = null;                       // Encrypted string to return
  RijndaelManaged aesAlg = null;              // RijndaelManaged object used to encrypt the data.

  try
  {
      // generate the key from the shared secret and the salt
      Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(pwd, _salt);

      // Create a RijndaelManaged object
      // with the specified key and IV.
      aesAlg = new RijndaelManaged();
      aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);
      aesAlg.IV = key.GetBytes(aesAlg.BlockSize / 8);

      // Create a decrytor to perform the stream transform.
      ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

      // Create the streams used for encryption.
      using (MemoryStream msEncrypt = new MemoryStream())
      {
          using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
          {
              using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
              {

                  //Write all data to the stream.
                  swEncrypt.Write(filename);
              }
          }
          outStr = Convert.ToBase64String(msEncrypt.ToArray());
      }
  }
  finally
  {
      // Clear the RijndaelManaged object.
      if (aesAlg != null) {
          aesAlg.Clear();
      }
  }

  <a class="@(linkclass) member-link" href="/media/download/document.ashx?@outStr" target="vp_filedownload">@linktitle</a>

}